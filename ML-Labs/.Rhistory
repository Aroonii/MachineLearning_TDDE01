res2 = boot(data, statistic = f2, R = 10000, mle=mle, ran.gen = rng, sim="parametric")
e2 = envelope(res2)
lines(data$MET, e2$point[2,], col="red")
lines(data$MET, e2$point[1,], col="red")
data$EX = as.numeric(data$EX)
data$MET = as.numeric(data$MET)
set.seed(12345)
f1 = function(data1){
tree = tree(EX~MET, data=data1, control = control) #fit tree model
#predict values for EX from original data
pred = predict(tree, newdata=data)
return(pred)
}
f2 = function(data1){
tree = tree(EX~MET, data=data1, control = control) #fit tree model
#predict values for EX from original data
pred = predict(tree, newdata=data)
n = length(data$EX)
predEX = rnorm(n, pred, sd(resid(mle)))
return(predEX)
}
rng = function(data, mle){
data1 = data.frame(EX = data$EX, MET = data$MET)
n = length(data$EX)
#generate new EX
data1$EX = rnorm(n, predict(mle, newdata=data1), sd(resid(mle)))
return(data1)
}
mle = final.tree #same as step 2
res1 = boot(data, statistic = f1, R = 1000, mle=mle, ran.gen = rng, sim="parametric")
e1 = envelope(res1)
plot(data$MET, ordered_data$EX, xlab="MET", ylab="EX", ylim=c(100,450))
lines(data$MET, e$point[2,], col="blue")
lines(data$MET, e$point[1,], col="blue")
res2 = boot(data, statistic = f2, R = 10000, mle=mle, ran.gen = rng, sim="parametric")
e2 = envelope(res2)
lines(data$MET, e2$point[2,], col="red")
lines(data$MET, e2$point[1,], col="red")
data$EX = as.numeric(data$EX)
data$MET = as.numeric(data$MET)
set.seed(12345)
f1 = function(data1){
tree = tree(EX~MET, data=data1, control = control) #fit tree model
#predict values for EX from original data
pred = predict(tree, newdata=data)
return(pred)
}
f2 = function(data1){
tree = tree(EX~MET, data=data1, control = control) #fit tree model
#predict values for EX from original data
pred = predict(tree, newdata=data)
n = length(data$EX)
predEX = rnorm(n, pred, sd(resid(mle)))
return(predEX)
}
rng = function(data, mle){
data1 = data.frame(EX = data$EX, MET = data$MET)
n = length(data$EX)
#generate new EX
data1$EX = rnorm(n, predict(mle, newdata=data1), sd(resid(mle)))
return(data1)
}
mle = final.tree #same as step 2
res1 = boot(data, statistic = f1, R = 1000, mle=mle, ran.gen = rng, sim="parametric")
e1 = envelope(res1)
plot(data$MET, data$EX, xlab="MET", ylab="EX", ylim=c(100,450))
lines(data$MET, e$point[2,], col="blue")
lines(data$MET, e$point[1,], col="blue")
res2 = boot(data, statistic = f2, R = 10000, mle=mle, ran.gen = rng, sim="parametric")
e2 = envelope(res2)
lines(data$MET, e2$point[2,], col="red")
lines(data$MET, e2$point[1,], col="red")
res1 = boot(data, statistic = f1, R = 1000, mle=mle, ran.gen = rng, sim="parametric")
e1 = envelope(res1)
plot(data$MET, data$EX, xlab="MET", ylab="EX", ylim=c(100,450))
lines(data$MET, e$point[2,], col="blue")
lines(data$MET, e$point[1,], col="blue")
res1 = boot(data, statistic = f1, R = 1000, mle=mle, ran.gen = rng, sim="parametric")
e1 = envelope(res1)
plot(data$MET, data$EX, xlab="MET", ylab="EX", ylim=c(100,450))
lines(data$MET, e1$point[2,], col="blue")
lines(data$MET, e1$point[1,], col="blue")
res2 = boot(data, statistic = f2, R = 10000, mle=mle, ran.gen = rng, sim="parametric")
e2 = envelope(res2)
lines(data$MET, e2$point[2,], col="red")
lines(data$MET, e2$point[1,], col="red")
f = function(data, ind) {
D <- data[ind,]
res <- tree(EX~MET, data=D, control=control)
pred <- predict(res, newdata=data)
return(pred)
}
res <- boot(data, f, R=1000)
#compute confidence bands
e <- envelope(res)
plot(data$MET, ordered_data$EX, xlab="MET", ylab="EX")
lines(data$MET, Yfit, col="red")
lines(data$MET, e$point[2,], col="blue")
lines(data$MET, e$point[1,], col="green")
plot(data$MET, ordered_data$EX, xlab="MET", ylab="EX")
plot(data$MET, data$EX, xlab="MET", ylab="EX")
plot(data$MET, data$EX, xlab="MET", ylab="EX")
#lines(data$MET, Yfit, col="red")
lines(data$MET, e$point[2,], col="blue")
lines(data$MET, e$point[1,], col="green")
res=boot(data, f, R=1000) #make bootstrap
e = envelope(res)
points(data$MET, e$point[1,], col = "red", type = "l")
points(data$MET, e$point[2,], col = "red",type = "l")
tree.control(48, mincut = 8)
control = tree.control(48, mincut = 8)
tree.fit = tree(EX ~ MET, data = data, control = control)
plot(tree.fit)
text(tree.fit, prety = 0)
set.seed(1234567890)
cv.tree = cv.tree(tree.fit)
plot(cv.tree$size, cv.tree$dev)
min.leafs = cv.tree$size[which.min(cv.tree$dev)]
min.k = cv.tree$k[which.min(cv.tree$dev)]
min.leafs
final.tree = prune.tree(tree.fit, best = min.leafs)
summary(final.tree)
plot(final.tree)
text(final.tree, pretty = 0)
tree.predict = predict(final.tree, newdata = data, type = "vector")
plot(data$MET, data$EX)
points(data$MET, tree.predict, col = "red")
summary.final = summary(final.tree)
summary.fit = summary(tree.fit)
final.residuals = summary.final$residuals
tree.residuals = summary.fit$residuals
hist(final.residuals, breaks = 8)
hist(tree.residuals, breaks = 8)
##part 3
#library(boot)
# computingbootstrapsamples
set.seed(12345)
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
res= tree(EX ~ MET, data = data1, control = control)
pruned.tree = prune.tree(res, best = 3)
#predictvaluesfor all Area valuesfrom the original data s책ledess data inte data1
tree.predict=predict(pruned.tree,newdata=data)
return(tree.predict)
}
res=boot(data, f, R=1000) #make bootstrap
e = envelope(res)
plot(data$MET, data$EX, main = "non-parametric confidence bands")
lines(data$MET, tree.predict, col = "red")
points(data$MET, e$point[1,], col = "red", type = "l")
points(data$MET, e$point[2,], col = "red",type = "l")
#conficence bands are bumpy. This is beause that no distribution is asumeed for the data and the model
# tries to accustom as best as it can to the given data. The width is rather high which incicates that the model
#is not that relaible. That we can almostdraw a straight line though the band firther indicates
#that the model is not reliable since it means that each EX value wpuld yield the same MET value again
##part 4
rng=function(data, mle  ) {
data1=data.frame(EX= data$EX, MET=data$MET)
n=length(data$EX)
#generatenew Price
data1$EX=rnorm(n,predict(mle, newdata=data1),sd(resid(mle)))
return(data1)
}
#predictionband
f2=function(data1){
#data1=data[ind,]# extractbootstrapsample
res= tree(EX ~ MET, data = data1, control = control)
pruned.tree = prune.tree(res, best = 3)
#predictvaluesfor all Area valuesfrom the original data
tree.predict=predict(pruned.tree,newdata=data)
#Fixa predictionband genom att sampla n nya punkter som har v채ntev채rde enligt prediction
#dvs punkter som med 95% sannolikhet kommer att hamna d채r
n = length(data$EX)
predictionband = rnorm(n, tree.predict, sd(resid(mle)))
return(predictionband)
}
#confidenceband
f1=function(data1){
#data1=data[ind,]# extractbootstrapsample
res= tree(EX ~ MET, data = data1, control = control)
pruned.tree = prune.tree(res, best = 3)
#predictvaluesfor all Area valuesfrom the original data
tree.predict=predict(pruned.tree,newdata=data)
return(tree.predict)
}
res.pred=boot(data, statistic=f2, R=1000, mle =final.tree, ran.gen=rng , sim="parametric")
res.conf=boot(data, statistic=f1, R=1000, mle =final.tree, ran.gen=rng , sim="parametric")
e.pred = envelope(res.pred)
e.conf = envelope(res.conf)
plot(data$MET, data$EX)
#lines(data$MET, tree.predict, col = "red")
points(data$MET, e.pred$point[1,], col = "blue", type = "l")
points(data$MET, e.pred$point[2,], col = "blue",type = "l")
points(data$MET, e.conf$point[1,], col = "green", type = "l")
points(data$MET, e.conf$point[2,], col = "green",type = "l")
res.pred=boot(data, statistic=f2, R=1000, mle =final.tree, ran.gen=rng , sim="parametric")
e.pred = envelope(res.pred)
mle = final.tree
res.pred=boot(data, statistic=f2, R=1000, mle =mle, ran.gen=rng , sim="parametric")
res.conf=boot(data, statistic=f1, R=1000, mle =mle, ran.gen=rng , sim="parametric")
e.pred = envelope(res.pred)
e.conf = envelope(res.conf)
plot(data$MET, data$EX)
#lines(data$MET, tree.predict, col = "red")
points(data$MET, e.pred$point[1,], col = "blue", type = "l")
points(data$MET, e.pred$point[2,], col = "blue",type = "l")
points(data$MET, e.conf$point[1,], col = "green", type = "l")
points(data$MET, e.conf$point[2,], col = "green",type = "l")
plot(data$MET, data$EX, ylim =c(100,450))
#lines(data$MET, tree.predict, col = "red")
points(data$MET, e.pred$point[1,], col = "blue", type = "l")
points(data$MET, e.pred$point[2,], col = "blue",type = "l")
points(data$MET, e.conf$point[1,], col = "green", type = "l")
points(data$MET, e.conf$point[2,], col = "green",type = "l")
f = function(data, ind) {
D <- data[ind,]
res <- tree(EX~MET, data=D, control=control)
pred <- predict(res, newdata=data)
return(pred)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
#ASSIGNMENT 2
bank = read.csv2('bank.csv')
setwd("C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18")
#ASSIGNMENT 2
bank = read.csv2('bank.csv')
glm = glm(Visitors ~ Time, data= bank, family = poisson(link="log"))
#plot(glm)
coefficients(glm)
glm$coefficients
# Time = => intercept + Time*0.4017
time = data.frame(Time = bank$Time)
control=exp(0.1742155+0.4017126*time)
print(control)
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
e = envelope(res)
plot(res)
new.time = data.frame(Time = seq(12,13,0.05))
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,300))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
min.value_13 = exp(e$point[2,21])
max.value_13 = exp(e$point[1,21])
cat("the bank should expect between", min.value_13, " and ", max.value_13, "at 13.00" )
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
e = envelope(res)
plot(res)
new.time = data.frame(Time = seq(12,13,0.05))
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,300))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1, type = "response"),sd(mle$residuals))
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
set.seed(12345)
glm = glm(Visitors ~ Time, data= bank, family = poisson(link="log"))
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
#data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
data1$Visitors = rpois(n, predict(mle, newdata = data1))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
set.seed(12345)
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
e = envelope(res)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
#data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
data1$Visitors = rpois(n, predict(mle, newdata = data1, type = "response"))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family = poisson(link = "log")) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
set.seed(12345)
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
e = envelope(res)
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,300))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
min.value_13 = exp(e$point[2,21])
max.value_13 = exp(e$point[1,21])
cat("the bank should expect between", min.value_13, " and ", max.value_13, "at 13.00" )
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
library(MASS)
library(e1071)
#install.packages('MASS')
#install.packages('e1071')
library(MASS)
library(e1071)
#install.packages('ggplot2')
library(ggplot2)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
set.seed(1234567890)
Var <- runif(50, 0, 10)
tr <- data.frame(Var, Sin=sin(Var))
tr1 <- tr[1:25,] # Fold 1
tr2 <- tr[26:50,] # Fold 2
thresh.vector = rep(0,10)
thresh.error = rep(0,10)
MSE = rep(0,2)
#Random varaiable initialization of the weights in the interval [-1,1]
winit = runif(31, -1,1)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr1, hidden =c(10), startweights = winit)
prediction = predict(nn, tr2)
MSE[1] = mean((prediction - tr2$Sin)^2)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr2, hidden =c(10), startweights = winit)
prediction = predict(nn, tr1$Sin)
MSE[2] = mean((prediction-tr1$Sin)^2)
errEstimate = sum(MSE)/2
print(errEstimate)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr1, hidden =c(10), startweights = winit)
prediction = predict(nn, tr2)
MSE[1] = mean((prediction - tr2$Sin)^2)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr2, hidden =c(10), startweights = winit)
prediction = predict(nn, tr1$Sin)
prediction = predict(nn, tr1$Sin)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr2, hidden =c(10), startweights = winit)
prediction = predict(nn, tr1$Sin)
prediction = predict(nn, tr1)
MSE[2] = mean((prediction-tr1$Sin)^2)
thresh.vector = rep(0,10)
thresh.error = rep(0,10)
MSE = rep(0,2)
#Random varaiable initialization of the weights in the interval [-1,1]
winit = runif(31, -1,1)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr1, hidden =c(10), startweights = winit)
prediction = predict(nn, tr2)
MSE[1] = mean((prediction - tr2$Sin)^2)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr2, hidden =c(10), startweights = winit)
prediction = predict(nn, tr1)
MSE[2] = mean((prediction-tr1$Sin)^2)
errEstimate = sum(MSE)/2
print(errEstimate)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Lab2Part3.R', echo=TRUE)
setwd("C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs")
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Lab2Part3.R', echo=TRUE)
mle = final.tree
set.seed(12345)
res.pred=boot(data, statistic=f2, R=1000, mle =mle, ran.gen=rng , sim="parametric")
res.conf=boot(data, statistic=f1, R=1000, mle =mle, ran.gen=rng , sim="parametric")
e.pred = envelope(res.pred)
e.conf = envelope(res.conf)
plot(data$MET, data$EX, ylim =c(100,450))
#lines(data$MET, tree.predict, col = "red")
points(data$MET, e.pred$point[1,], col = "blue", type = "l")
points(data$MET, e.pred$point[2,], col = "blue",type = "l")
points(data$MET, e.conf$point[1,], col = "green", type = "l")
points(data$MET, e.conf$point[2,], col = "green",type = "l")
mle = final.tree
set.seed(12345)
res.pred=boot(data, statistic=f2, R=1000, mle =mle, ran.gen=rng , sim="parametric")
set.seed(12345)
res.conf=boot(data, statistic=f1, R=1000, mle =mle, ran.gen=rng , sim="parametric")
e.pred = envelope(res.pred)
e.conf = envelope(res.conf)
plot(data$MET, data$EX, ylim =c(100,450))
#lines(data$MET, tree.predict, col = "red")
points(data$MET, e.pred$point[1,], col = "blue", type = "l")
points(data$MET, e.pred$point[2,], col = "blue",type = "l")
points(data$MET, e.conf$point[1,], col = "green", type = "l")
points(data$MET, e.conf$point[2,], col = "green",type = "l")
View(res)
data(spam)
set.seed(1234567890)
kernel1 = ksvm(type~., data = spam, cross = 2, C = 1, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel2 = ksvm(type~., data = spam, cross = 2, C = 10, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel3 = ksvm(type~., data = spam, cross = 2, C = 100, kernel = "rbfdot", kpar = list(sigma = 0.05))
cross(kernel1)
cross(kernel2)
cross(kernel3)
data(spam)
set.seed(1234567890)
kernel1 = ksvm(type~., data = spam, cross = 2, C = 1, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel2 = ksvm(type~., data = spam, cross = 2, C = 10, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel3 = ksvm(type~., data = spam, cross = 2, C = 100, kernel = "rbfdot", kpar = list(sigma = 0.05))
cross(kernel1)
cross(kernel2)
cross(kernel3)
data(spam)
set.seed(1234567890)
kernel1 = ksvm(type~., data = spam, cross = 2, C = 1, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel2 = ksvm(type~., data = spam, cross = 2, C = 10, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel3 = ksvm(type~., data = spam, cross = 2, C = 1000, kernel = "rbfdot", kpar = list(sigma = 0.05))
cross(kernel1)
cross(kernel2)
cross(kernel3)
set.seed(1234567890)
kernel1 = ksvm(type~., data = spam, cross = 2, C = 1, kernel = "rbfdot", kpar = list(sigma = 10))
set.seed(1234567890)
kernel2 = ksvm(type~., data = spam, cross = 2, C = 10, kernel = "rbfdot", kpar = list(sigma = 0.05))
set.seed(1234567890)
kernel3 = ksvm(type~., data = spam, cross = 2, C = 1000, kernel = "rbfdot", kpar = list(sigma = 0.05))
cross(kernel1)
cross(kernel2)
cross(kernel3)
