#step1
data = read.csv("tecator.csv", header=TRUE, sep=";", dec=",")#import data
set.seed(12345)#för samma resultat varje körning
plot(data$Moisture, data$Protein)
#step2
#step3
n=dim(data)[1]#Kollar antal rows
id=sample(1:n, floor(n*0.5))#sample väljer ut från element 1:n, floor rundar ned
train=data[id,]
test=data[-id,]
MSE.train <- numeric(6)
MSE.test <- numeric(6)
for (i in 1:6) {
fit.train <- lm(Moisture ~ poly(Protein, i, raw=TRUE), train)
summary <- summary(fit.train)
MSE.train[i] <-  mean(summary$residuals^2)
prediction <- predict(fit.train, test)
MSE.test[i] <- mean((prediction-test$Moisture)^2)
}
i=seq(1,6,1)
plot(i,MSE.train, type="l", col="red", ylim=c(30,40))
lines(i, MSE.test, col="blue")
legend(x = "bottomright", c("training data", "test data"), lty = c(1,1), lwd = c(1,1), col=c("Red", "Blue"))
setwd("~/TDDE01/lab1")
#step1
data = read.csv("tecator.csv", header=TRUE, sep=";", dec=",")#import data
set.seed(12345)#för samma resultat varje körning
plot(data$Moisture, data$Protein)
#step2
#step3
n=dim(data)[1]#Kollar antal rows
id=sample(1:n, floor(n*0.5))#sample väljer ut från element 1:n, floor rundar ned
train=data[id,]
test=data[-id,]
MSE.train <- numeric(6)
MSE.test <- numeric(6)
for (i in 1:6) {
fit.train <- lm(Moisture ~ poly(Protein, i, raw=TRUE), train)
summary <- summary(fit.train)
MSE.train[i] <-  mean(summary$residuals^2)
prediction <- predict(fit.train, test)
MSE.test[i] <- mean((prediction-test$Moisture)^2)
}
i=seq(1,6,1)
plot(i,MSE.train, type="l", col="red", ylim=c(30,40))
lines(i, MSE.test, col="blue")
legend(x = "bottomright", c("training data", "test data"), lty = c(1,1), lwd = c(1,1), col=c("Red", "Blue"))
?legend
?stepAIC
?AIC
?AIC
??stepAIC
data.lm <- lm(Fat ~Channel1:Channel100, data)
stepAIC(data.lm, trace=FALSE)
??stepAIC
library("MASS", lib.loc="/usr/lib/R/library")
detach("package:MASS", unload=TRUE)
library(mass)
library("MASS", lib.loc="/usr/lib/R/library")
library(MASS)
stepAIC(data.lm, trace=FALSE)
stepAIC <- stepAIC(data.lm, trace=FALSE)
?stepAIC
stepAIC <- stepAIC(data.lm, trace=FALSE, direction="both"
data.lm <- lm(Fat ~Channel1:Channel100, data)
library(MASS)
stepAIC <- stepAIC(data.lm, trace=FALSE)
data = read.csv("tecator.csv", header=TRUE, sep=";", dec=",")#import data
set.seed(12345)#för samma resultat varje körning
data.lm <- lm(Fat ~Channel1:Channel100, data)
library(MASS)
stepAIC <- stepAIC(data.lm, trace=FALSE)
data.lm <- lm(Fat ~Channel1*Channel100, data)
library(MASS)
stepAIC <- stepAIC(data.lm, trace=FALSE)
data.lm <- lm(Fat ~Channel1:Channel100, data)
library(MASS)
stepAIC <- stepAIC(data.lm, trace=FALSE)
subset <- cbind(data[,2:101], data$Fat)
data.lm <- lm(Fat ~ ., subset)
library(MASS)
subset <- cbind(data[,2:101], data$Fat)
data.lm <- lm(data$Fat ~ ., subset)
library(MASS)
stepAIC <- stepAIC(data.lm, trace=FALSE)
subset <- data[,2:101]
data.lm <- lm(data$Fat ~ ., subset)
library(MASS)
stepAIC <- stepAIC(data.lm, trace=FALSE)
stepAIC$coefficients
stepAIC$coefficients$names
names(stepAIC$coefficients)
?glmnet
install.packages("glmnet")
?glmnet
#step5
library(glmnet)
?glmnet
ridgefit <- glmnet(as.matrix(subset), data$Fat, alpha=0, family="gaussian")
plot(ridgefit, xvar="lambda", label=TRUE)
?lasso
??lasso
?coef
lassofit <- glmnet(as.matrix(subset), data$Fat, alpha=1, family="gaussian")
plot(lassofit, xvar="lambda", label=TRUE)
?glmnet
?cvtools
install.packages("cvTools")
library(cvTools)
detach("package:cvTools", unload=TRUE)
library("cvTools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
?cvFit
cv <- cvFit(lassofit, y=data$Fat, data=subset, K=10)
lassoCV <- cv.glmnet(as.matrix(subset), data$Fat, alpha=1, family="gaussian")
?glmnet
?cv.glmnet
plot(lassoCV$lambda, lassoCV$cvm)
plot(lassoCV$lambda, lassoCV$cvm, style="l", col="blue")
plot(lassoCV$lambda, lassoCV$cvm, type="l", col="blue")
lassoCV <- cv.glmnet(as.matrix(subset), data$Fat, alpha=1, family="gaussian", lambda=c(0,7,0.1))
plot(lassoCV$lambda, lassoCV$cvm, type="l", col="blue")
lassoCV <- cv.glmnet(as.matrix(subset), data$Fat, alpha=1, family="gaussian", lambda=seq(0,7,0.1))
plot(lassoCV$lambda, lassoCV$cvm, type="l", col="blue")
?cvFit
lassoCV2 <- cvFit(glmnet, as.matrix(subset), data$Fat, alpha=1, family="gaussian", K=10)
?glmnet
lassoCV2 <- cvFit(lassofit, y=Fat, data=subset, K=10)
lassoCV2 <- cvFit(lassofit, y=subset$Fat, data=subset, K=10)
lassoCV2 <- cvFit(lassofit, y=subset$Fat, data=data, K=10)
lassoCV2 <- cvFit(lassofit, y=data$Fat, data=data, K=10)
lassoCV2 <- cvFit(lassofit, y=data$Fat, data=subset, K=10)
lassoCV2 <- cvFit(lassofit, y=Fat, data=subset, K=10)
lassoCV2 <- cvFit(lassofit, y=subset$Fat, data=subset, K=10)
