RNGversion('3.5.1')
set.seed(1234567890)
library(geosphere)
stations <- read.csv("stations.csv", fileEncoding="latin1")
setwd("C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18")
setwd("C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18")
length(seq(12,13,0.05))
5/50
5/60
seq(12,13,0.05)
length(seq(12,13,0.05))
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
install.packages('boot')
library(boot)
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
data1 = bank
mle=lm(Visitors~Time, data=data2)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
plot(res)
#res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(bank$Time, res$t0, col = "red")
points(time, exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
min_value_13=exp(e$point[2,21])
max_value_13=exp(e$point[1,21])
cat("The bank should expect between", min_value_13, "and", max_value_13, "customers", sep=" ")
data2 = bank[order(bank$Time),]
data1 = bank
mle=lm(Visitors~Time, data=data2)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
plot(res)
res=boot(data2, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
#ASSIGNMENT 2
bank = read.csv2('bank.csv')
glm = glm(Visitors ~ Time, data= bank, family = poisson(link="log"))
plot(glm)
control=exp(0.1742155+0.4017126*time)
print(control)
data2 = bank[order(bank$Time),]
data1 = bank
mle=lm(Visitors~Time, data=data2)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
plot(res)
res=boot(data2, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
glm = glm(Visitors ~ Time, data= bank, family = poisson(link="log"))
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
mle=lm(Visitors~Time, data=data2)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
n=length(data2$Visitors)
n
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
data1 = bank
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
plot(res)
library(boot)
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
data1 = bank
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
library(boot)
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
data1 = bank
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
plot(res)
library(boot)
#reorder (although already ordered) according to time
data2 = bank[order(bank$Time),]
data1 = bank
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new data
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linear model
#predict values for all Area values from the original data
visitorsP=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n = length(seq(12,13,0.05))
predictedVisitors = rnorm(n, visitorsP, sd = sd(glm$residuals))
return(predictedVisitors)
}
res=boot(data2, statistic=f1, R=1000, mle=glm, ran.gen=rng, sim="parametric")
plot(res)
e = envelope(res)
View(e)
plot(e$point[,1])
plot(seq(12,13,0.05), e$point[,1])
new.time = data.frame(Time = seq(12,13,0.05))
plot(new.time, e$point[,1])
e$point[,1]
e$point[1,]
plot(new.time, e$point[1,])
plot(seq(12,13,0.05), e$point[1,])
plot(new.time$Time, e$point[1,])
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[1,], col = "red")
points(seq(12,13,0.05), e$point[2,], col = "black")
plot(seq(12,13,0.05), e$point[1,], col = "red")
points(seq(12,13,0.05), e$point[2,], col = "black")
e$point[2,]
plot(seq(12,13,0.05), e$point[2,], col = "black")
plot(seq(12,13,0.05), e$point[2,], col = "black")
plot(seq(12,13,0.05), e$point[1,], col = "red")
plot(seq(12,13,0.05), e$point[2,], col = "black")
plot(seq(12,13,0.05), e$point[1,], col = "red")
plot(seq(12,13,0.05), e$point[2,], col = "green")
plot(seq(12,13,0.05), e$point[1,], col = "red")
plot(seq(12,13,0.05), e$point[2,], col = "green")
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
plot(res)
plot(seq(12,13,0.05), exp(e$point[1,]), col = "red")
plot(seq(12,13,0.05), exp(e$point[1,]), col = "red")
plot(seq(12,13,0.05), exp(e$point[2,]), col = "green")
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
min.value_14 = exp(e$point[2,][21])
min.value_13 = exp(e$point[2,][21])
min.value_13
min.value_13 = exp(e$point[2,21])
min.vaÃ¶
min.value_13
min.value_13 = exp(e$point[2,21])
max.value_13 = exp(e$point[1,21])
print("the bank should expect between")
print("the bank should expect between" max.value_13)
print("the bank should expect between max.value_13")
cat("the bank should expect between max.value_13")
cat("the bank should expect between" max.value_13 )
cat("the bank should expect between", max.value_13 )
cat("the bank should expect between", max.value_13 " and " min.value_13 "at 13.00" )
cat("the bank should expect between", max.value_13, " and ", min.value_13 "at 13.00" )
cat("the bank should expect between", max.value_13, " and ", min.value_13, "at 13.00" )
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
plot(bank$Time, bank$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,300))
points(seq(12,13,0.05), exp(e$point[1,]), col = "red")
points(seq(12,13,0.05), exp(e$point[2,]), col = "green")
cat("the bank should expect between", min.value_13, " and ", max.value_13, "at 13.00" )
install.packages(neuralnet)
install.packages('neuralnet')
library
library(neuralnet)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2017-04-18/2017-04-18.R', echo=TRUE)
install.packages("neuralnet")
data = runif(50, 0, 10)
data
plot(data)
hist(data)
set.seed(1234567890)
Var <- runif(50, 0, 10)
tr <- data.frame(Var, Sin=sin(Var))
tr1 <- tr[1:25,] # Fold 1
tr2 <- tr[26:50,] # Fold 2
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr1, hidden =c(10), startweights = winit)
#Random varaiable initialization of the weights in the interval [-1,1]
winit = runif(31, -1,1)
nn = neuralnet(Sin~ Var, threshold = 0.001, data = tr1, hidden =c(10), startweights = winit)
prediction.val = predict(nn, tr2)
MSE = rep(0,2)
View(prediction.val)
tr.data = data.frame(tr1 = tr1, tr2 = tr2)
View(tr.data)
tr.data = c("tr1", "tr2")
tr.data
tr.data[2]
