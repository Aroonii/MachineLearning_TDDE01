RNGversion('3.5.1')
set.seed(1234567890)
library(geosphere)
stations <- read.csv("stations.csv", fileEncoding="latin1")
setwd("C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01")
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
install.packages('glmnet')
library(glmnet)
#install.packages('glmnet')
#library(glmnet)
plot(data)
View(data)
View(data)
#install.packages('glmnet')
#library(glmnet)
plot(data$Class, data$A1)
#install.packages('glmnet')
#library(glmnet)
plot(data$A1, data$Class)
#install.packages('glmnet')
#library(glmnet)
plot(data$A1, data$Class, type = "b")
x_train = model.matrix( ~ . -1, train[,16])
x_train = model.matrix(Class ~ . -1, train[,16])
x_train = model.matrix(Class ~ . -1, train[,-16])
x_train = model.matrix(train[,1:15] ~ . -1, train[,-16])
traaim[,1:15]
train[,1:15]
x_train = model.matrix(train[,1:15] ~ . -1, train[,-16])
x_train = model.matrix(as.matrix(train[,1:15]) ~ . -1, train[,-16])
x_train = model.matrix( ~ .xlev = -1, train[,-16])
x_train = model.matrix( ~ .,xlev = -1, train[,-16])
x_train = model.matrix( ~ .,xlev = -1, train[,-16])
x_train = model.matrix( ~ ., -1, train[,-16])
xlev =
x_train = model.matrix( ~ .xlev = -1, train[,-16])
x_train = model.matrix( ~ .,xlev = -1, train[,-16])
x_train = model.matrix( ~ ., train[,-16])
x_train = model.matrix( ~ ., train[,-16], -1)
x_train = model.matrix( ~ ., train[,-16], xlev = -1)
View(x_train)
x_train = model.matrix( ~ ., train[,-16])
View(x_train)
x_train = model.matrix( ~ ., train[,-16], scale = TRUE)
View(x_train)
x_train = model.matrix( ~ ., train[,-16])
View(x_train)
x_train = model.matrix( ~ ., train[,-16], xlev = -1)
scaled _x  = scale (x_train)
scaled _x  = scale(x_train)
scaled_x  = scale(x_train)
View(scaled_x)
model = glmnet(x_train, train[,16])
model = glmnet(x_train, train[,16], alpha = 1, family = "gaussian")
model = cv.glmnet(x_train, train[,16], alpha = 1, family = "gaussian")
model$lambda.min
plot(model)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
coef(model, s = "lambda.min")
x_train = model.matrix( ~.-1 train[,-16])
x_train = model.matrix( ~ .-1, train[,-16])
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
View(x_train)
x_train = model.matrix( ~ .-1, train[,-16])
#library(glmnet)
class=as.factor(train$Class)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
model = cv.glmnet(x_train, train[,16], alpha = 1, family = "gaussian")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#library(glmnet)
class=as.factor(train$Class)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#library(glmnet)
class=as.factor(train$Class)
set.seed(12345)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
x_train = model.matrix( ~ .-1, train[,-16])
View(x_train)
class = as.factor(train$Class)
set.seed(12345)
class = as.factor(train$Class)
model = cv.glmnet(x_train, class, alpha = 1, family = "gaussian")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
class = as.factor(train$Class)
model = cv.glmnet(x_train, class, alpha = 1, family = "gaussian")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#library(glmnet)
class=as.factor(train$Class)
set.seed(12345)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
class = as.factor(train$Class)
model = cv.glmnet(x_train, class, alpha = 1, family = "gaussian")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
train$Class
class = (train$Class)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
class = as.factor(train$Class)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
class = as.factor(train$Class)
model = cv.glmnet(x_train, class, alpha = 1, family = "gaussian")
model = cv.glmnet(as.matrix(x_train), class, alpha = 1, family = "gaussian")
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
class = train$Class
factorclass = as.factor(class)
factorclass
fac = as.matrix(factorclass)
fac = as.matrix(factorclass)
View(fac)
model = cv.glmnet(x_train, fac, alpha = 1, family = "gaussian")
class = train$Class
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
class = train$Class
factorclass = as.factor(class)
model = cv.glmnet(x_train, class, alpha = 1, family = "binomial")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
x_train = model.matrix( ~ .-1, train[,-16])
library(glmnet)
class=as.factor(train$Class)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
class = as.factor(train$Class)
model = cv.glmnet(x_train, class, alpha = 1, family = "binomial")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
library(glmnet)
class=as.factor(train$Class)
set.seed(12345)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
class = as.factor(train$Class)
model = cv.glmnet(x_train, class, alpha = 1, family = "binomial")
model$lambda.min
plot(model)
coef(model, s = "lambda.min")
x_train = model.matrix( ~ .-1, train[,-16])
library(glmnet)
class=as.factor(train$Class)
set.seed(12345)
lassomodel=cv.glmnet(x_train, class, alpha=1, family="binomial")
lassomodel$lambda.min
plot(lassomodel)
coef(lassomodel, s="lambda.min")
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
source('C:/Users/aruup817/MachineLearning_TDDE01/ML-Labs/Tenta 2016-10-01/2016-01-09.R', echo=TRUE)
prediciton.tree = prediction(finalTree)
prediciton.tree = predictt(finalTree)
prediciton.tree = predict(finalTree)
prediciton.tree = predict(finalTree, newdata = test)
help(predict.tree)
prediciton.tree = predict(finalTree, newdata = test, type = "class")
prediciton.tree = predict(finalTree, newdata = test, type = "response")
prediciton.tree = predict(finalTree, newdata = test, type = "vector")
prediciton.tree = predict(finalTree, newdata = test, type = "vector")
prediciton.tree = predict(finalTree, newdata = test)
prediciton.tree = predict(finalTree, newdata = test)
prediciton.tree = predict(finalTree, newdata = test, type = "vector")
help("predict.glmnet")
x_train = model.matrix( ~ .-1, train[,-16])
#x_train = model.matrix( ~ ., train[,-16], xlev = -1)
set.seed(12345)
class = as.factor(train$Class)
lasso.model = cv.glmnet(x_train, class, alpha = 1, family = "binomial")
lasso.model$lambda.min
plot(lasso.model)
coef(lassp.model, s = "lambda.min")
coef(lasso.model, s = "lambda.min")
prediction.lasso  = predict(lassso,model, newdata = test)
prediction.lasso  = predict(lassso.model, newdata = test)
prediction.lasso  = predict(lasso.model, newdata = test)
help("predict.cv.glmnet")
prediction.lasso  = predict(lasso.model, newdata = test)
#optimal lambda (penality paramter) is 0.0994
#The nr of componetns used are 23
# the mean sqare error is lower for a lower value of lambda this is natural since the penality factor increases the mse
# The model using the optimal lambda has a smaller binomial deviance but it does not look statistically significatly
# better. It is hower better since it gives a more sparse solution since it uses less components hence # avoiding
#overfitting, reducing complexity. hence the variance goes down
newx = test[,-16]
#optimal lambda (penality paramter) is 0.0994
#The nr of componetns used are 23
# the mean sqare error is lower for a lower value of lambda this is natural since the penality factor increases the mse
# The model using the optimal lambda has a smaller binomial deviance but it does not look statistically significatly
# better. It is hower better since it gives a more sparse solution since it uses less components hence # avoiding
#overfitting, reducing complexity. hence the variance goes down
new_x = test[,-16]
prediction.lasso  = predict(lasso.model, newx = new_x)
prediction.lasso  = predict(lasso.model, newx = test)
y = test$Class
x = test[,1:15]
prediction.lasso  = predict(lasso.model, newx = x)
prediction.lasso  = predict(lasso.model, newx = as.matrix(x)
prediction.lasso  = predict(lasso.model, newx = as.matrix(x))
prediction.lasso  = predict(lasso.model, newx = as.matrix(x), type = "response")
prediction.lasso  = predict(lasso.model, newx = as.matrix(test[,1:15]), type = "response")
View(x)
x_test = model.matrix( ~ .-1, train[,-16])
View(x_test)
prediction.lasso  = predict(lasso.model, newx = x_test, type = "response")
ynew.tree = predict(finalTree, newdata = test, type = "vector")
ynew.lasso  = predict(lasso.model, newx = x_test, type = "response")
sum(y*log(ynew.tree)+(1-y)*log(1-ynew.tree))
sum(y*log(ynew.lasso)+(1-y)*log(1-ynew.lasso))
plot(log(10))
plot(log(1))
plot(log(2))
plot(log(2))
plot(log(-1))
plot(log(0.05))
plot(log(0))
plot(log(1)
plot(log(1))
plot(log(1))
sum(y*log(ynew.tree)+(1-y)*log(1-ynew.tree))
sum(y*log(ynew.lasso)+(1-y)*log(1-ynew.lasso))
ynew.lasso  = predict(lasso.model, newx = x_test, type = "respdnse")
o
ynew.lasso  = predict(lasso.model, newx = x_test, type = "response")
# This model could be suitable since it takes into account the probability of cclass being
#classsified. not only if it gets right clasification ( could have been a low probabilty that it did)
#according to this creterium to tree model is better since it is less negative => closer predictionn
# This model could be suitable since it takes into account the probability of cclass being
#classsified. not only if it gets right clasification ( could have been a low probabilty that it did)
